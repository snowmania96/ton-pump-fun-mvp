#include "imports/stdlib.fc";
#include "imports/launchpad-utils.fc";

(slice, cell, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(), ;; admin_address
        ds~load_ref(), ;; jetton_minter_code
        ds~load_ref() ;; deployed_tokens
    );
}

() save_data(slice admin_address, cell jetton_minter_code, cell deployed_tokens) impure inline {
    set_data(begin_cell()
            .store_slice(admin_address) ;; admin_address
            .store_ref(jetton_minter_code) ;;jetton minter code
            .store_ref(deployed_tokens) ;; list of deployed tokens
            .end_cell()
    );
}

(slice) create_token_contract(slice launchpad_address, cell content, int amount, cell jetton_minter_code, cell master_msg) impure {
    cell state_init = calculate_jetton_minter_state_init(launchpad_address, content, jetton_minter_code);
    slice minter_address = calculate_jetton_minter_address(state_init);

    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(minter_address)
            .store_coins(amount)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(master_msg);
    send_raw_message(msg.end_cell(), 1);
    return minter_address;
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if(in_msg_body.slice_empty?()) {
        return ();
    }

    (slice admin_address, cell jetton_minter_code, cell deployed_tokens) = load_data();

    slice cs = in_msg_full.begin_parse();
    slice sender_address = cs~load_msg_addr(); ;;user address

    int op = in_msg_body~load_uint(32); ;;operation
    int query_id = in_msg_body~load_uint(64);

    if (op == op::init()) {
        admin_address = in_msg_body~load_msg_addr();
        deployed_tokens = begin_cell().end_cell(); ;;Initialize empty list
        save_data(admin_address, content, jetton_minter_code, deployed_tokens);
    } elseif (op == op::create_token()) { ;; Deploy Token Contract and mint specific amount of jetton token.

        cell master_msg = in_msg_body~load_ref();
        int amount = in_msg_body~load_coins(); ;;ton amount
        slice master_msg_cs = master_msg.begin_parse();
        master_msg_cs~skip_bits(32 + 64); ;; op + query_id
        cell content = master_msg_cs~load_ref();
        slice minter_address = create_token_contract(my_address(), content, amount, jetton_minter_code, master_msg);

        deployed_tokens = store_address(minter_address, deployed_tokens); ;;store newly created minter_address
        save_data(admin_address, jetton_minter_code, deployed_tokens);
    }
}

cell store_address(slice address, cell list) {
    return begin_cell()
            .store_ref(list)
            .store_slice(address)
            .end_cell();
}

(slice, cell, cell) get_launchpad_data() method_id {
    (slice admin_address, cell jetton_minter_code, cell deployed_tokens) = load_data();
    return (admin_address, jetton_minter_code, deployed_tokens);
}
